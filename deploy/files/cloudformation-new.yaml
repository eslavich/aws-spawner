AWSTemplateFormatVersion: 2010-09-09
Description: "Launch a JupyterHub stack with separate proxy and hub instances,
              and an RDS database."
Metadata:

Parameters:
  HubInstanceType:
    Description: Hub instance type
    Type: String
    Default: t3.medium

  HubImageId:
    Description: Hub AMI ID
    Type: AWS::EC2::Image::Id

  ProxyInstanceType:
    Description: Proxy instance type
    Type: String
    Default: t3.medium

  ProxyImageId:
    Description: Proxy AMI ID
    Type: AWS::EC2::Image::Id

  ProxyPublicPort:
    Description: Port used by the proxy instance for user requests
    Type: Number
    Default: 8000

  ProxyPublicCertificateARN:
    Description: ARN of the TLS certificate used by the proxy public load balancer
    Type: String
    Default: ""

  ProxyPublicIngressCIDR:
    Description: CIDR block controlling what IPs may access the proxy public load balancer
    Type: String
    Default: 0.0.0.0/0

  ProxyAPIPort:
    Description: Port used by the proxy instance for API requests
    Type: Number
    Default: 8001

  HubPort:
    Description: Port used by the hub instance for requests
    Type: Number
    Default: 8081

  NotebookPort:
    Description: Port used by the notebook server instances for requests
    Type: Number
    Default: 8888

  BastionSecurityGroupId:
    Description: ID of the security group that enables access from the bastion node
    Type: AWS::EC2::SecurityGroup::Id

  VpcId:
    Description: ID of the VPC that will contain the hub and proxy instances
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: Array of VPC subnet IDs that will contain the hub and proxy instances
    Type: List<AWS::EC2::Subnet::Id>

  # TODO: Remove this parameter once the bastion setup is ready
  KeyName:
    Description: Name of the key pair to install on the hub and proxy instances
    Type: String
    Default: eslavich-key-pair

Conditions:
  HasProxyPublicCertificateARN: !Not [!Equals [!Ref ProxyPublicCertificateARN, ""]]

Resources:
  ProxyPublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the JupyterHub proxy public load balancer
      GroupName: proxy-public-elb-security-group
      SecurityGroupIngress:
        - Description: "HTTP connections from the internet"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ProxyPublicIngressCIDR
        - Description: HTTPS connections from the internet
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ProxyPublicIngressCIDR
      # TODO: Consider SecurityGroupEgress
      # TODO: Consider Tags
      VpcId: !Ref VpcId

  ProxyPublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true
        # TODO: consider access logs, idle timeout
      Name: proxy-public-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ProxyPublicLoadBalancerSecurityGroup
      Subnets: !Ref SubnetIds
      # TODO: Consider Tags

  ProxyPublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: proxy-public-target-group
      # TODO: Consider adding an explicit health check path to the proxy
      # TODO: Change to HTTPS once we're encrypting internal traffic
      HealthCheckProtocol: HTTP
      Matcher:
        # The proxy will redirect to the hub's login page by default
        HttpCode: 302
      Port: !Ref ProxyPublicPort
      # TODO: Change to HTTPS once we're encrypting internal traffic
      Protocol: HTTP
      # TODO: Consider Tags
      VpcId: !Ref VpcId

  ProxyPublicHTTPRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasProxyPublicCertificateARN
    Properties:
      DefaultActions:
          - Type: redirect
            RedirectConfig:
              - Protocol: HTTPS
                Port: 443
                StatusCode: 301
      LoadBalancerArn: !Ref ProxyPublicLoadBalancer
      Port: 80
      Protocol: HTTP

  ProxyPublicHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: !Not HasProxyPublicCertificateARN
    Properties:
      DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ProxyPublicTargetGroup
      LoadBalancerArn: !Ref ProxyPublicLoadBalancer
      Port: 80
      Protocol: HTTP

  ProxyPublicHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasProxyPublicCertificateARN
    Properties:
      Certificates:
        - CertificateArn: !Ref ProxyPublicCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProxyPublicTargetGroup
      LoadBalancerArn: !Ref ProxyPublicLoadBalancer
      Port: 443
      Protocol: HTTPS

  ProxyAPILoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the JupyterHub proxy API load balancer
      GroupName: proxy-api-elb-security-group
      SecurityGroupIngress:
        - Description: "API connections from hub instances"
          IpProtocol: tcp
          # TODO: Change this to 443 once we're encrypting internal traffic
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref HubInstanceSecurityGroup
      # TODO: Consider SecurityGroupEgress
      # TODO: Consider Tags
      VpcId: !Ref VpcId

  ProxyAPILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true
        # TODO: consider access logs, idle timeout
      Name: proxy-api-load-balancer
      Scheme: internal
      SecurityGroups:
        - !Ref ProxyAPILoadBalancerSecurityGroup
      Subnets: !Ref SubnetIds
      # TODO: Consider Tags

  ProxyAPITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: proxy-api-target-group
      HealthCheckPath: /api/
      # TODO: Change to HTTPS once we're encrypting internal traffic
      HealthCheckProtocol: HTTP
      Port: !Ref ProxyAPIPort
      # TODO: Change to HTTPS once we're encrypting internal traffic
      Protocol: HTTP
      # TODO: Consider Tags
      VpcId: !Ref VpcId

  ProxyAPIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasProxyPublicCertificateARN
    Properties:
      DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ProxyAPITargetGroup
      LoadBalancerArn: !Ref ProxyAPILoadBalancer
      # TODO: Change to 443 once we're encrypting internal traffic
      Port: 80
      # TODO: Change to HTTPS once we're encrypting internal traffic
      Protocol: HTTP

  ProxyInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for JupyterHub proxy instances"
      SecurityGroupIngress:
        - Description: "SSH access from the bastion node"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupId
        - Description: "Proxy connections from the public ELB"
          IpProtocol: tcp
          FromPort: !Ref ProxyPublicPort
          ToPort: !Ref ProxyPublicPort
          SourceSecurityGroupId: !Ref ProxyPublicLoadBalancerSecurityGroup
        - Description: "API connections from the API ELB"
          IpProtocol: tcp
          FromPort: !Ref ProxyAPIPort
          ToPort: !Ref ProxyAPIPort
          SourceSecurityGroupId: !Ref ProxyAPILoadBalancerSecurityGroup
      # TODO: Consider SecurityGroupEgress
      # TODO: Consider Tags

  ProxyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: proxy-launch-template
      LaunchTemplateData:
        ImageId: !Ref ProxyImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref ProxyInstanceType
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref ProxyInstanceSecurityGroup
        # TODO: TagSpecifications

  ProxyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: proxy-auto-scaling-group
      MinSize: 1
      MaxSize: 1
      # TODO: Add a real proxy health check
      LaunchTemplate:
        LaunchTemplateId: !Ref ProxyLaunchTemplate
        Version: !GetAtt ProxyLaunchTemplate.LatestVersionNumber                                   }
      LoadBalancerNames:
        - !Ref ProxyPublicLoadBalancer
        - !Ref ProxyAPILoadBalancer
      # TODO: Consider MetricsCollection
      # TODO: Consider NotificationConfigurations
      # TODO: Consider ServiceLinkedRoleARN
      # TODO: Consider Tags
      TargetGroupARNs:
        - !Ref ProxyPublicTargetGroup
        - !Ref ProxyAPITargetGroup
      VPCZoneIdentifier: !Ref SubnetIds

  HubLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the JupyterHub hub load balancer
      GroupName: hub-elb-security-group
      SecurityGroupIngress:
        - Description: "Connections from the proxy instances"
          IpProtocol: tcp
          # TODO: Change this to 443 once we're encrypting internal traffic
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ProxyLoadBalancerSecurityGroup
        - Destination: "Connections from the notebook servers"
          IpProtocol: tcp
          # TODO: Change this to 443 once we're encrypting internal traffic
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref NotebookInstanceSecurityGroup
      # TODO: Consider SecurityGroupEgress
      # TODO: Consider Tags
      VpcId: !Ref: VpcId

  HubLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true
        # TODO: consider access logs, idle timeout
      Name: hub-load-balancer
      Scheme: internal
      SecurityGroups:
        - !Ref HubLoadBalancerSecurityGroup
      Subnets: !Ref SubnetIds

  HubTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: hub-target-group
      # TODO: Add a real health check endpoint
      # TODO: Change to HTTPS once we're encrypting internal traffic
      HealthCheckProtocol: HTTP
      Port: !Ref HubPort
      # TODO: Change to HTTPS once we're encrypting internal traffic
      Protocol: HTTP
      # TODO: Consider Tags
      VpcId: !Ref VpcId

  HubInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for JupyterHub hub instances
      GroupName: hub-security-group
      SecurityGroupIngress:
        - Description: "SSH access from the bastion node"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupId
        - Description: "Connections from the hub load balancer"
          IpProtocol: tcp
          FromPort: !Ref HubPort
          ToPort: !Ref HubPort
          SourceSecurityGroupId: !Ref HubLoadBalancerSecurityGroup
      # TODO: Consider SecurityGroupIngress
      # TODO: Consider Tags
      VpcId: Ref: VpcId

  HubLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: hub-launch-template
      LaunchTemplateData:
        ImageId: !Ref HubImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: !Ref HubInstanceType
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref HubInstanceSecurityGroup
        # TODO: UserData, which will include:
        # - Proxy API hostname
        # - Hub domain name?
        # - Notebook instance launch template
        # TODO: TagSpecifications

  HubAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: hub-auto-scaling-group
      MinSize: 1
      MaxSize: 1
      # TODO: Add a real hub health check
      LaunchTemplate:
        LaunchTemplateId: !Ref HubLaunchTemplate
        Version: !GetAtt HubLaunchTemplate.LatestVersionNumber
      LoadBalancerNames:
        - !Ref HubLoadBalancer
      # TODO: Consider MetricsCollection
      # TODO: Consider NotificationConfigurations
      # TODO: Consider ServiceLinkedRoleARN
      # TODO: Consider Tags
      TargetGroupARNs:
        - !Ref HubTargetGroup
      VPCZoneIdentifier: !Ref SubnetIds

  NotebookInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for notebook instances
      GroupName: notebook-security-group
      SecurityGroupIngress:
        - Description: "SSH access from the bastion node"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupId
        - Description: "Connections from proxy instances"
          IpProtocol: tcp
          FromPort: !Ref NotebookPort
          ToPort: !Ref NotebookPort
          SourceSecurityGroupId: !Ref ProxyInstanceSecurityGroup
      # TODO: Consider SecurityGroupEgress
      # TODO: Consider Tags
      VpcId: Ref: VpcId

  NotebookLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: notebook-launch-template
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: terminate
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref NotebookInstanceSecurityGroup
        # TODO: TagSpecifications

  # TODO: DB instance
  # Type: AWS::RDS::DBInstance
  # Properties:
  #   AllocatedStorage: String
  #   AllowMajorVersionUpgrade: Boolean
  #   AssociatedRoles:
  #     - DBInstanceRole
  #   AutoMinorVersionUpgrade: Boolean
  #   AvailabilityZone: String
  #   BackupRetentionPeriod: Integer
  #   CharacterSetName: String
  #   CopyTagsToSnapshot: Boolean
  #   DBClusterIdentifier: String
  #   DBInstanceClass: String
  #   DBInstanceIdentifier: String
  #   DBName: String
  #   DBParameterGroupName: String
  #   DBSecurityGroups:
  #     - String
  #   DBSnapshotIdentifier: String
  #   DBSubnetGroupName: String
  #   DeleteAutomatedBackups: Boolean
  #   DeletionProtection: Boolean
  #   Domain: String
  #   DomainIAMRoleName: String
  #   EnableCloudwatchLogsExports:
  #     - String
  #   EnableIAMDatabaseAuthentication: Boolean
  #   EnablePerformanceInsights: Boolean
  #   Engine: String
  #   EngineVersion: String
  #   Iops: Integer
  #   KmsKeyId: String
  #   LicenseModel: String
  #   MasterUsername: String
  #   MasterUserPassword: String
  #   MonitoringInterval: Integer
  #   MonitoringRoleArn: String
  #   MultiAZ: Boolean
  #   OptionGroupName: String
  #   PerformanceInsightsKMSKeyId: String
  #   PerformanceInsightsRetentionPeriod: Integer
  #   Port: String
  #   PreferredBackupWindow: String
  #   PreferredMaintenanceWindow: String
  #   ProcessorFeatures:
  #     - ProcessorFeature
  #   PromotionTier: Integer
  #   PubliclyAccessible: Boolean
  #   SourceDBInstanceIdentifier: String
  #   SourceRegion: String
  #   StorageEncrypted: Boolean
  #   StorageType: String
  #   Tags:
  #     - Tag
  #   Timezone: String
  #   UseDefaultProcessorFeatures: Boolean
  #   VPCSecurityGroups:
  #     - String

Outputs:
  ProxyPublicLoadBalancerDNSName:
    Description: DNS name of the proxy public load balancer
    Value: !Sub "${ProxyPublicLoadBalancer.DNSName}"
  StackName:
    Description:
    Value: !Sub "${AWS::StackName}"
